@page "/"
@inject NavigationManager _navigationManager
@inject IJSRuntime JSRuntime
@implements IAsyncDisposable

<PageTitle>Chat</PageTitle>
<h3>Chat</h3>

@if (!IsConnected)
{
    <div class="input-group">
        <input @bind-value="_username" @bind-value:event="oninput" @onkeyup="HandleInput"
           class="form-control" placeholder="Enter username here.." />
        <button class="btn btn-primary form-control-append" @onclick="Connect">
            Connect
        </button>
    </div>
}
else
{
    <textarea style="width: 100%; height: 600px;" @ref="_textAreaRef" disabled="@(!IsConnected)">
        @_messages
                </textarea>
    <div class="input-group">
        <input @ref="_messageInputRef"
           @bind-value="_message"
           @bind-value:event="oninput"
           @onkeyup="HandleInput"
           disabled="@(!IsConnected)"
           class="form-control">
        <button class="btn btn-primary form-control-append"
            @onclick="Send"
            disabled="@(!IsConnected)">
            Send
        </button>
    </div>
}

@code {
    private HubConnection? _hubConnection;
    private string _messages = string.Empty;
    private string _username = string.Empty;
    private string _message = string.Empty;

    ElementReference _textAreaRef;
    ElementReference _messageInputRef;

    private async Task Connect()
    {
        _hubConnection = new HubConnectionBuilder()
            .WithUrl(_navigationManager.ToAbsoluteUri($"{Constants.ChatHubWithUsername}{_username}"))
            .Build();

        _hubConnection.On("FocusOnInput", async () =>
        {
            await _messageInputRef.FocusAsync();
        });

        _hubConnection.On<string, string>(Constants.ReceiveMessage, (user, message) =>
        {
            var msg = $"{(string.IsNullOrEmpty(user) ? "" : $"{user}: ")}{message}";
            _messages += $"{msg} \n";
            JSRuntime.InvokeVoidAsync("scrollToBottom", _textAreaRef);
            StateHasChanged();
        });

        await _hubConnection.StartAsync();
    }

    private async Task Send()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.SendAsync(Constants.HubMethodSendMessage, _username, _message);
            _message = string.Empty;
        }
    }

    private async Task HandleInput(KeyboardEventArgs args)
    {
        if (args?.Key == null || args.Key.Equals("Enter"))
        {
            if (IsConnected)
                await Send();
            else
            {
                await Connect();
            }
        }
    }

    public bool IsConnected => _hubConnection?.State == HubConnectionState.Connected;

    public async ValueTask DisposeAsync()
    {
        if (_hubConnection != null)
        {
            await _hubConnection.DisposeAsync();
        }
    }
}
